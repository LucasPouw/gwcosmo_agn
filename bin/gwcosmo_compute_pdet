#!/usr/bin/env python
"""
This script calculates pdets.
Ignacio Magana, Rachel Gray
"""
# System imports
import pkg_resources
import os
import sys
from optparse import Option, OptionParser
import pickle

import numpy as np
import gwcosmo

data_path = pkg_resources.resource_filename('gwcosmo', 'data/')

def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

# Command line options
parser = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("--mass_distribution", default=None,
            help="Choose between BNS-gaussian, BNS-uniform or BBH-powerlaw mass distributions for default Pdet calculations."),
        Option("--psd", default=None,
            help="Select between 'O1' and 'O2' PSDs, for default Pdet calculations. By default we use aLIGO at design sensitivity."), 
        Option("--powerlaw_slope", default='1.6', type=float,
            help="Set powerlaw slope for BBH powelaw mass distribution for Pdet calculation."),
        Option("--linear_cosmology", default='False',
            help="Assume a linear cosmology."),
        Option("--basic_pdet", default='False',
            help="Allow for masses to be redshifted in Pdet using False."),
        Option("--full_waveform", default='True',
            help="Use the full waveform to calculate detection probability, otherwise only use the inspiral part (default is True)."),
        Option("--Nsamps", default=5000,
            help="The number of samples to use to calculate detection probability (default is 5000)."),
        Option("--constant_H0", default='False',
            help="Compute at a fixed H0 value (default is False)."),
        Option("--H0", default=70,
            help="Set H0 value when using constant_H0 = True (default is 70)."),
        Option("--combine", default=None,
            help="Directory of constant_H0 Pdets to combine into single Pdet pickle."),
        Option("--outputfile", default=None,
            help="Name of output pdet file.")
    ])
opts, args = parser.parse_args()
print(opts)

# Check for missing required arguments
missing = []
for option in parser.option_list:
    if 'required' in option.help and eval('opts.' + option.dest) == None:
        missing.extend(option._long_opts)
if len(missing) > 0:
    parser.error('Missing required options: {0}'.format(str(missing)))
    
if opts.combine is None:
    mass_distribution = str(opts.mass_distribution)
    psd = str(opts.psd)
    alpha = float(opts.powerlaw_slope)
    linear = str2bool(opts.linear_cosmology)
    basic = str2bool(opts.basic_pdet)
    full_waveform = str2bool(opts.full_waveform)
    Nsamps = int(opts.Nsamps)
    constant_H0 = str2bool(opts.constant_H0)
    H0 = float(opts.H0)

    if full_waveform is True:
        kind = 'full_waveform'
    else:
        kind = 'inspiral'

    if mass_distribution == 'BBH-powerlaw':
        print("Calculating Pdet with a " + mass_distribution + " mass distribution with alpha = " + str(alpha) + " at " + psd + " sensitivity using the " + kind)
    else:
        print("Calculating Pdet with a " + mass_distribution + " mass distribution at " + psd + " sensitivity using the " + kind)

    pdet = gwcosmo.detection_probability.DetectionProbability(mass_distribution=mass_distribution, asd=psd, basic=basic, linear=linear, alpha=alpha, full_waveform=full_waveform, Nsamps=Nsamps ,constant_H0=constant_H0, H0=H0)

    if opts.outputfile is None:
        if mass_distribution == 'BBH-powerlaw':
            pdet_path = '{}PSD_{}_alpha_{}_Nsamps{}_{}.p'.format(psd, mass_distribution, alpha, Nsamps, kind)
        else:
            pdet_path = '{}PSD_{}_Nsamps{}_{}.p'.format(psd, mass_distribution, Nsamps, kind)
    else:
        pdet_path = str(opts.outputfile)

    pickle.dump( pdet, open( pdet_path, "wb" ) )

else:
    from scipy.interpolate import interp2d
    from scipy.special import logit

    mass_distribution = str(opts.mass_distribution)
    psd = str(opts.psd)
    alpha = float(opts.powerlaw_slope)
    alpha_s = str(opts.powerlaw_slope)
    pdet_path = str(opts.combine)

    probs=[]
    for k in np.arange(20,201):
        pdets = pickle.load(open(pdet_path+'/pdet_'+psd+'_'+alpha_s+'_'+str(k)+'.p', 'rb'))
        probs.append(pdets.prob)

    pdet = gwcosmo.likelihood.detection_probability.DetectionProbability(
                    mass_distribution=mass_distribution, alpha=alpha,
                    asd=psd, detectors=['H1', 'L1'], Nsamps=2,
                    network_snr_threshold=12, Omega_m=0.308,
                    linear=False, basic=False, M1=50., M2=50.,
                    constant_H0=False, H0=70, full_waveform=True)

    H0vec = np.arange(20,201)
    pdet.H0vec = H0vec

    prob = np.array(probs)
    pdet.prob = prob

    logit_prob=logit(prob)
    for i in range (len(logit_prob)):
        logit_prob[i]=np.where(logit_prob[i]==float('+inf'), 100, logit_prob[i])   
    interp_average = interp2d(pdet.z_array, pdet.H0vec, logit_prob, kind='cubic')
    pdet.interp_average = interp_average
    
    pdet_path = '{}PSD_{}_alpha_{}_Nsamps{}_{}.p'.format(psd, mass_distribution, alpha_s, 10000, 'full_waveform')
    pickle.dump( pdet, open( pdet_path, "wb" ) )

