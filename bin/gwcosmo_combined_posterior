#!/usr/bin/python
"""
This script combines individual H0 posteriors.
Ignacio Magana, Rachel Gray
"""
# System imports
import os
import sys
from optparse import Option, OptionParser

#Global Imports
import matplotlib 
matplotlib.use('agg')
import matplotlib.pyplot as plt
matplotlib.rcParams['font.family']= 'Times New Roman'
matplotlib.rcParams['font.sans-serif']= ['Bitstream Vera Sans']
matplotlib.rcParams['text.usetex']= True
matplotlib.rcParams['mathtext.fontset']= 'stixsans'

import seaborn as sns
sns.set_context('talk')
sns.set_style('ticks')
sns.set_palette('colorblind')

import numpy as np
import gwcosmo

# Command line options
parser = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("-d", "--mdcdir", metavar="MDCDIR", default=None,
            help="MDCDIR: Directory to MDC posterior samples (required)"),
        Option("-y", "--plot", metavar="PLOT", default=True,
            help="PLOT: Plot results"),
        Option("-k", "--save", metavar="SAVE", default=True,
            help="SAVE: Save results"),
        Option("-b", "--outputfile", metavar="OUTPUTFILE", default='Posterior',
            help="OUTPUTFILE: Name of output file")
    ])
opts, args = parser.parse_args()

# Check for missing required arguments
missing = []
for option in parser.option_list:
    if 'required' in option.help and eval('opts.' + option.dest) == None:
        missing.extend(option._long_opts)
if len(missing) > 0:
    parser.error('Missing required options: {0}'.format(str(missing)))

mdc_dir = str(opts.mdcdir)

mdc_dir_list = []
for path, subdirs, files in os.walk(mdc_dir):
    for name in files:
        filepath = os.path.join(path, name)
        if filepath[-4:] == '.npz':
            mdc_dir_list.append(filepath)
            
plot = bool(opts.plot)

save = bool(opts.save)
outputfile = str(opts.outputfile)

def main():
    "Compute combined P(H0)"

    Nevents = len(mdc_dir_list)
    
    H0 = np.load(mdc_dir_list[0])['arr_0'][0]
    dH0 = H0[1] - H0[0]
    
    prior = np.load(mdc_dir_list[0])['arr_0'][2]
    
    likelihoods=[]
    for path in mdc_dir_list:
        likelihoods.append(np.load(path)['arr_0'][1])

    likelihood_comb = np.ones(H0.size)

    for k in range(Nevents):
        likelihood_comb *= likelihoods[k]
        likelihood_comb = likelihood_comb/np.sum(likelihood_comb) #normalise within loop, else will go to 0.

    posterior = prior*likelihood_comb

    posterior_norm = posterior/np.sum(posterior)/dH0
    prior_norm = prior/np.sum(prior)/dH0

    if plot == True:
        plt.figure()
        plt.plot(H0,prior_norm,ls=':', linewidth = 3.0, label='prior')
        plt.plot(H0,posterior_norm,linewidth = 3.0, label='posterior')
        plt.plot(H0,likelihood_comb,linewidth = 3.0, ls = '--', label='likelihood')
        plt.axvline(70,ls='--', c='k', label = r'$H_0 = 70$ (km s$^{-1}$ Mpc$^{-1}$)')
        plt.xlim(min_h0,max_h0)
        plt.xticks(fontsize=14)
        plt.yticks(fontsize=14)
        plt.xlabel(r'$H_0$ (km s$^{-1}$ Mpc$^{-1}$)',fontsize=16)
        plt.ylabel(r'$p(H_0)$ (km$^{-1}$ s Mpc)', fontsize=16)
        plt.legend(loc='best',fontsize=16)
        plt.tight_layout()
        plt.savefig(outputfile+'.png',dpi=400)

    if save == True:
        np.savez(outputfile+'.npz',[H0,likelihood_comb,prior,posterior_norm])

if __name__ == "__main__":
    main()