#!/usr/bin/env python
"""
This script computes H0 as a function of H0 bins.
Ignacio Magana, Rachel Gray, Ankan Sur
"""
# System imports
import os
import sys
from optparse import Option, OptionParser

#Global Imports
import matplotlib 
matplotlib.use('agg')
import matplotlib.pyplot as plt
matplotlib.rcParams['font.family']= 'Times New Roman'
matplotlib.rcParams['font.sans-serif']= ['Bitstream Vera Sans']
matplotlib.rcParams['text.usetex']= True
matplotlib.rcParams['mathtext.fontset']= 'stixsans'

import seaborn as sns
sns.set_context('paper')
sns.set_style('ticks')
sns.set_palette('colorblind')

import numpy as np

import gwcosmo
from gwcosmo.utilities.posterior_utilities import confidence_interval

import astropy.constants as const
speed_of_light = const.c.to('km/s').value


def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

# Command line options
parser = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("--method", default=None,
            help="Select counterpart/statistical (required)"),
        Option("--min_H0", default='30.0', type=float,
            help="Set minimum value of H0 Posterior"),
        Option("--max_H0", default='200.0', type=float,
            help="Set maximum value of H0 Posterior"),
        Option("--bins_H0", default='200', type=int,
            help="Set number of H0 Posterior bins"),
        Option("--posterior_samples", default=None,
            help="LALinference posterior samples file in format (.dat or hdf5) or use GW170817, GW170814, GW170818"),
        Option("--mass_distribution", default=None,
            help="Choose between BNS or BBH mass distributions for Pdet calculation."),
        Option("--skymap", default=None,
            help="LALinference 3D skymap file in format (.fits)"),
        Option("--galaxy_catalog", default=None,
            help="Load galaxy catalog in pickle format"),
        Option("--psd", default=None,
            help="Select between 'O1' and 'O2' PSDs, by default we use aLIGO at design sensitivity (default=None)."), 
        Option("--galaxy_weighting", default='False',
            help="Set galaxy catalog weighting"),
        Option("--completion", default='False',
            help="Assumes a complete catalog."),
        Option("--uncertainty", default='True',
            help="Apply redshift uncertainties."),
        Option("--linear_cosmology", default='False',
            help="Assume a linear cosmology."),
        Option("--basic_pdet", default='False',
            help="Allow for masses to be redshifted in Pdet using False."),
        Option("--counterpart_ra", default=None,
            help="Right ascension of counterpart"),
        Option("--counterpart_dec", default=None,
            help="Declination of counterpart"),
        Option("--counterpart_z", default=None,
            help="Redshift of counterpart"),
        Option("--counterpart_v", default=None,
            help="Peculiar velocity correction of counterpart in km/sec"),
        Option("--outputfile", default='Posterior',
            help="Name of output file"),
        Option("--plot", default=None,
            help="Plot .npz file")
    ])
opts, args = parser.parse_args()
print(opts)

# Check for missing required arguments
missing = []
for option in parser.option_list:
    if 'required' in option.help and eval('opts.' + option.dest) == None:
        missing.extend(option._long_opts)
if len(missing) > 0:
    parser.error('Missing required options: {0}'.format(str(missing)))

print('Selected method is:', opts.method)
if opts.plot is not None:
    filename = str(opts.plot)
    data = np.load(filename)['arr_0']
    H0 = data[0]
    min_H0 = min(H0)
    max_H0 = max(H0)
    dH0 = H0[1]-H0[0]
    prior_uniform = gwcosmo.prior.priors.pH0(H0,prior='uniform')
    prior_log = gwcosmo.prior.priors.pH0(H0,prior='log')
    prior_uniform_norm = prior_uniform/np.sum(prior_uniform*dH0)
    prior_log_norm = prior_log/np.sum(prior_log*dH0)
    posterior_uniform_norm = data[2]
    posterior_log_norm = data[3]
    outputfile = filename[:-4]
    
else:
    if (opts.posterior_samples is None and
        opts.skymap is None):
            parser.error('Provide either posterior samples or skymap.')

    if opts.mass_distribution is None:
            parser.error('Provide a mass distribution to use for Pdet calculation.')

    if (opts.galaxy_catalog is None and opts.method == 'statistical'):
        parser.error('The statistical method requires a galaxy catalog. Please provide one.')
		
    if opts.psd is None:
        parser.error('Please provide a PSD.')

    if opts.posterior_samples is not None:
            posterior_samples = str(opts.posterior_samples)
    if opts.skymap is not None:
            skymap = str(opts.skymap)

    if opts.mass_distribution is not None:
            mass_distribution = str(opts.mass_distribution)

    if opts.galaxy_catalog is not None:
        galaxy_catalog = str(opts.galaxy_catalog)

    if opts.method == 'statistical':
        galaxy_weighting = str2bool(opts.galaxy_weighting)
        completion = str2bool(opts.completion)

    if opts.method == 'counterpart':
        galaxy_weighting = False
        completion = True
        if opts.counterpart_ra is not None:
            counterpart_ra = float(opts.counterpart_ra)
        if opts.counterpart_dec is not None:
            counterpart_dec = float(opts.counterpart_dec)
        if opts.counterpart_z is not None:
            counterpart_z = float(opts.counterpart_z)
        if opts.counterpart_v is not None:
            counterpart_v = float(opts.counterpart_v)

    # Set command line arguments
    min_H0 = float(opts.min_H0)
    max_H0 = float(opts.max_H0)
    bins_H0 = float(opts.bins_H0)
    
    uncertainty = str2bool(opts.uncertainty)
    linear = str2bool(opts.linear_cosmology)
    basic = str2bool(opts.basic_pdet)
    psd = str(opts.psd)

    options_string = opts.method
    outputfile = str(opts.outputfile)

    "Compute P(H0)"
    H0 = np.linspace(min_H0, max_H0, bins_H0)
    dH0 = H0[1] - H0[0]
    
    if opts.posterior_samples is not None:
        print("Loading posterior samples.")
        samples = gwcosmo.likelihood.posterior_samples.posterior_samples()
        samples.load_posterior_samples(posterior_samples)
        distanceAnsat = False
        
        if opts.skymap is not None:
            print("Loading 2D skymap.")
            skymap = gwcosmo.likelihood.skymap.skymap(skymap)
            
    if opts.posterior_samples is None:
        print("Loading 3D skymap.")
        skymap = gwcosmo.likelihood.skymap.skymap(skymap)
        samples = None
        
    if opts.method == 'statistical':
        if galaxy_catalog[-2:] == '.p':
            catalog = gwcosmo.prior.catalog.galaxyCatalog(catalog_file=galaxy_catalog)
        else:
            print('Not a compatible catalog.')
        
        if catalog.skypatch['allsky'] is not None:
            allsky = False
            radeclims = catalog.skypatch['allsky']
        else:
            allsky = True
            radeclims = None
        
        counterpart = None

    if opts.method == 'counterpart':
        catalog = gwcosmo.prior.catalog.galaxyCatalog()
        counterpart = gwcosmo.prior.catalog.galaxyCatalog()
        if (opts.counterpart_ra is None or
            opts.counterpart_dec is None or
            opts.counterpart_z is None):
            parser.error('The counterpart method requires the ra, dec, and z of the galaxy.')
        else:
            counterpart.get_galaxy(0).ra = counterpart_ra*np.pi/180.
            counterpart.get_galaxy(0).dec = counterpart_dec*np.pi/180.
            counterpart.get_galaxy(0).z = counterpart_z
            counterpart.get_galaxy(0).sigmaz = counterpart_z/speed_of_light
            allsky = True
            radeclims = None

    # compute likelihood
    me = gwcosmo.gwcosmo.gwcosmoLikelihood(mass_distribution,samples,skymap,catalog,psd,EM_counterpart=counterpart,Omega_m=0.3,linear=linear\
                                           ,weighted=galaxy_weighting,whole_cat=allsky,radec_lim=radeclims,uncertainty=uncertainty,basic=basic)

    likelihood = me.likelihood(H0,complete=completion,counterpart_case='direct')
    prior_uniform = gwcosmo.prior.priors.pH0(H0,prior='uniform')
    posterior_uniform = prior_uniform*likelihood
    prior_log = gwcosmo.prior.priors.pH0(H0,prior='log')
    posterior_log= prior_log*likelihood
    
    prior_uniform_norm = prior_uniform/np.sum(prior_uniform*dH0)
    posterior_uniform_norm = posterior_uniform/np.sum(posterior_uniform*dH0)
    prior_log_norm = prior_log/np.sum(prior_log*dH0)
    posterior_log_norm = posterior_log/np.sum(posterior_log*dH0)
    
    np.savez(outputfile+'.npz',[H0,likelihood,posterior_uniform_norm,posterior_log_norm,opts])

print("Uniform Prior")
MAP_uniform, a_uniform, b_uniform = confidence_interval(posterior_uniform_norm,H0,level=0.683)
print("Log Prior")
MAP_log, a_log, b_log = confidence_interval(posterior_log_norm,H0,level=0.683)

ymin = 0
ymax = 1.1*max(posterior_log_norm)
planck_h = 0.6774*100
sigma_planck_h = 0.0062*100
riess_h = 0.7324*100
sigma_riess_h = 0.0174*100

c=sns.color_palette('colorblind')
plt.figure()
plt.axvline(planck_h,label='Planck',color=c[4])
plt.fill_betweenx([ymin,ymax],planck_h-2*sigma_planck_h,planck_h+2*sigma_planck_h,color=c[4],alpha=0.2)
plt.axvline(riess_h,label='SH0ES',color=c[2])
plt.fill_betweenx([ymin,ymax],riess_h-2*sigma_riess_h,riess_h+2*sigma_riess_h,color=c[2],alpha=0.2)
plt.axvline(70,ls='--', color='k',alpha=0.8, label = r'$H_0 = 70$ (km s$^{-1}$ Mpc$^{-1}$)')
plt.plot(H0,posterior_uniform_norm, linewidth = 3.0, label='Posterior (Uniform)',c=c[0])
plt.axvline(a_uniform,ls='--',c=c[0])
plt.axvline(b_uniform,ls='--',c=c[0])
plt.plot(H0,posterior_log_norm,linewidth = 3.0, label='Posterior (Log)',c=c[1])
plt.axvline(a_log,ls='--',c=c[1])
plt.axvline(b_log,ls='--',c=c[1])
plt.plot(H0,prior_uniform_norm,ls=':', linewidth = 3.0, label='Prior (Uniform)',c=c[0],alpha=0.6)
plt.plot(H0,prior_log_norm,ls=':', linewidth = 3.0, label='Prior (Log)',c=c[1],alpha=0.6)
plt.xlim(min_H0,max_H0)
plt.ylim(ymin,ymax)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel(r'$H_0$ (km s$^{-1}$ Mpc$^{-1}$)',fontsize=16)
plt.ylabel(r'$p(H_0)$ (km$^{-1}$ s Mpc)', fontsize=16)
plt.legend(loc='upper right',fontsize=10)
plt.tight_layout()
plt.savefig(outputfile+'.png',dpi=800)