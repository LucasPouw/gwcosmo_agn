#!/usr/bin/env python
"""
This script computes H0 as a function of H0 bins.
Ignacio Magana, Rachel Gray, Ankan Sur
"""
# System imports
import os
import sys
from optparse import Option, OptionParser

#Global Imports
import matplotlib 
matplotlib.use('agg')
import matplotlib.pyplot as plt
matplotlib.rcParams['font.family']= 'Times New Roman'
matplotlib.rcParams['font.sans-serif']= ['Bitstream Vera Sans']
matplotlib.rcParams['text.usetex']= True
matplotlib.rcParams['mathtext.fontset']= 'stixsans'

import seaborn as sns
sns.set_context('talk')
sns.set_style('ticks')
sns.set_palette('colorblind')

import numpy as np
import gwcosmo

def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

# Command line options
parser = OptionParser(
    description = __doc__,
    usage = "%prog [options]",
    option_list = [
        Option("-m", "--method", metavar="METHOD", default=None,
            help="METHOD: Select counterpart/statistical (required)"),
        Option("-u", "--min_H0", metavar="MINH0", default='30.0', type=float,
            help="MINH0: Set minimum value of H0 Posterior"),
        Option("-v", "--max_H0", metavar="MAXH0", default='200.0', type=float,
            help="MAXH0: Set maximum value of H0 Posterior"),
        Option("-x", "--bins_H0", metavar="BINSH0", default='200', type=int,
            help="BINSH0: Set number of H0 Posterior bins"),
        Option("-k", "--posterior_samples", metavar="SAMPLES", default=None,
            help="SAMPLES: LALinference posterior samples file in format (.dat or hdf5) or use GW170817, GW170814, GW170818"),
        Option("-t", "--mass_distribution", metavar="MASS_DISTRIBUTION", default=None,
            help="MASS_DISTRIBUTION: Choose between BNS or BBH mass distributions for Pdet calculation."),
        Option("-i", "--skymap", metavar="SKYMAP", default=None,
            help="SKYMAP: LALinference 3D skymap file in format (.fits)"),
        Option("-g", "--galaxy_catalog", metavar="GALAXY_CATALOG", default=None,
            help="GALAXY_CATALOG: Load galaxy catalog in pickle format"), 
        Option("-w", "--galaxy_weighting", metavar="WEIGHTING", default='False',
            help="WEIGHTING: Set galaxy catalog weighting"),
        Option("-c", "--completion", metavar="COMPLETENESS", default='False',
            help="COMPLETENESS: Set galaxy catalog completion function."),
        Option("-r", "--counterpart_ra", metavar="RA", default=None,
            help="RA: Right ascension of counterpart"),
        Option("-o", "--counterpart_dec", metavar="DEC", default=None,
            help="DEC: Declination of counterpart"),
        Option("-z", "--counterpart_z", metavar="REDSHIFT", default=None,
            help="REDSHIFT: Redshift of counterpart"),
        Option("-b", "--outputfile", metavar="OUTPUTFILE", default='Posterior',
            help="OUTPUTFILE: Name of output file")
    ])
opts, args = parser.parse_args()
print(opts)
print(args)

# Check for missing required arguments
missing = []
for option in parser.option_list:
    if 'required' in option.help and eval('opts.' + option.dest) == None:
        missing.extend(option._long_opts)
if len(missing) > 0:
    parser.error('Missing required options: {0}'.format(str(missing)))

print('Selected method is:', opts.method)

if (opts.posterior_samples is None and
    opts.skymap is None):
        parser.error('Provide either posterior samples and skymap.')
        
if opts.mass_distribution is None:
        parser.error('Provide a mass distribution to use for Pdet calculation.')
        
if opts.galaxy_catalog is None:
    parser.error('The statistical method requires a galaxy catalog. Please provide one.')
        
if opts.posterior_samples is not None:
        posterior_samples = str(opts.posterior_samples)
if opts.skymap is not None:
        skymap = str(opts.skymap)

if opts.mass_distribution is not None:
        mass_distribution = str(opts.mass_distribution)

if opts.galaxy_catalog is not None:
    galaxy_catalog = str(opts.galaxy_catalog)

if opts.method == 'statistical':
    galaxy_weighting = str2bool(opts.galaxy_weighting)
    completion = str2bool(opts.completion)

if opts.method == 'counterpart':
    galaxy_weighting = False
    completion = True
    if opts.counterpart_ra is not None:
        counterpart_ra = float(opts.counterpart_ra)
    if opts.counterpart_dec is not None:
        counterpart_dec = float(opts.counterpart_dec)
    if opts.counterpart_z is not None:
        counterpart_z = float(opts.counterpart_z)
        
# Set command line arguments
min_H0 = float(opts.min_H0)
max_H0 = float(opts.max_H0)
bins_H0 = float(opts.bins_H0)

options_string = opts.method
outputfile = str(opts.outputfile)

def main():
    "Compute P(H0)"
    H0 = np.linspace(min_H0, max_H0, bins_H0)
    dH0 = H0[1] - H0[0]
    
    if opts.posterior_samples is not None:
        samples = gwcosmo.likelihood.posterior_samples.posterior_samples()
        if posterior_samples[-4:] == 'hdf5':
            samples.load_posterior_samples_hdf5(posterior_samples)
        else:
            samples.load_posterior_samples(posterior_samples)
        skymap3d = None
        if opts.skymap is not None:
            skymap2d = gwcosmo.likelihood.skymap2d.skymap2d(skymap)
        else:
            skymap2d = None
    else:
        #TODO: Implement 3D skymap here for pixel method
        skymap3d = gwcosmo.likelihood.skymap.skymap(skymap)

    if galaxy_catalog[-2:] == '.p':
        catalog = gwcosmo.prior.catalog.galaxyCatalog(catalog_file=galaxy_catalog)
    else:
        print('Not a compatible catalog.')

    if catalog.skypatch['allsky'] is not None:
        allsky = False
        radeclims = catalog.skypatch['allsky']
    else:
        allsky = True
        radeclims = None

    if opts.method == 'counterpart':
        counterpart = gwcosmo.prior.catalog.galaxyCatalog()
        if (opts.counterpart_ra is None or
            opts.counterpart_dec is None or
            opts.counterpart_z is None):
            parser.error('The counterpart method requires the ra, dec, and z of the galaxy.')
        else:
            counterpart.get_galaxy(0).ra = counterpart_ra
            counterpart.get_galaxy(0).dec = counterpart_dec
            counterpart.get_galaxy(0).z = counterpart_z
    else:
        counterpart = None

    # compute likelihood
    me = gwcosmo.master.MasterEquation(mass_distribution,catalog,Omega_m=0.3,linear=False,weighted=galaxy_weighting,whole_cat=allsky,radec_lim=radeclims,uncertainty=True,basic=False)
    likelihood = me.likelihood(H0,samples,skymap2d=skymap2d,EM_counterpart=counterpart,complete=completion,counterpart_case='direct')
    prior_uniform = me.pH0(H0,prior='uniform')
    posterior_uniform = prior_uniform*likelihood
    prior_log = me.pH0(H0,prior='log')
    posterior_log= prior_log*likelihood
    
    prior_uniform_norm = prior_uniform/np.sum(prior_uniform*dH0)
    posterior_uniform_norm = posterior_uniform/np.sum(posterior_uniform*dH0)
    prior_log_norm = prior_log/np.sum(prior_log*dH0)
    posterior_log_norm = posterior_log/np.sum(posterior_log*dH0)

    if plot == True:
        plt.figure()
        plt.plot(H0,prior_uniform_norm,ls=':', linewidth = 3.0, label='Prior (Uniform)')
        plt.plot(H0,posterior_uniform_norm, linewidth = 3.0, label='Posterior (Uniform)')
        plt.plot(H0,prior_log_norm,ls=':', linewidth = 3.0, label='Prior (Log)')
        plt.plot(H0,posterior_log_norm,linewidth = 3.0, label='Posterior (Log)')
        plt.axvline(70,ls='--', c='k', label = r'$H_0 = 70$ (km s$^{-1}$ Mpc$^{-1}$)')
        plt.xlim(min_H0,max_H0)
        plt.ylim([0,max(prior_log_norm)])
        plt.xticks(fontsize=14)
        plt.yticks(fontsize=14)
        plt.xlabel(r'$H_0$ (km s$^{-1}$ Mpc$^{-1}$)',fontsize=16)
        plt.ylabel(r'$p(H_0)$ (km$^{-1}$ s Mpc)', fontsize=16)
        plt.legend(loc='upper right',fontsize=14)
        plt.tight_layout()
        plt.savefig(outputfile+'.png',dpi=400)

    if save == True:
        np.savez(outputfile+'.npz',[H0,likelihood,posterior_uniform_norm,posterior_log_norm,opts])

if __name__ == "__main__":
    main()